plugins {
  id "java"
}

repositories {
  mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


dependencies {
<<<<<<< HEAD
  implementation group: 'net.java.dev.jna', name: 'jna', version: '5.5.0'
  implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.5.0'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
=======

  compileOnly 'org.projectlombok:lombok:1.18.26'
  annotationProcessor 'org.projectlombok:lombok:1.18.26'

  implementation group: 'net.java.dev.jna', name: 'jna', version: '5.13.0'
  implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.13.0'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
  implementation 'cn.chenlichao:wmi4j:0.9'
  implementation 'com.profesorfalken:WMI4Java:1.6.3'
  implementation fileTree("${projectDir}/lib")

  testCompileOnly 'org.projectlombok:lombok:1.18.26'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
>>>>>>> origin/master
  testImplementation group: 'junit', name: 'junit', version: '4.11'
}

//compileJava.doFirst {
//  def proc = ['./builder'].execute()
//  def stdout = new StringBuilder()
//  proc.consumeProcessOutput(stdout, stdout)
//  if (proc.waitFor() != 0) {
//    throw new Error("could not build c libs: " + stdout)
//  }
//}

def mainClassName = 'nativeapi.jacob.wmi.Main'
task fatJar(type: Jar) {
  archiveBaseName = project.name + '-all'
  manifest {
    attributes(
      'Main-Class': mainClassName,
      'Class-Path': configurations.compileClasspath.collect { "lib/${it.name}" }.join(' ')
    )
  }
  from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}
